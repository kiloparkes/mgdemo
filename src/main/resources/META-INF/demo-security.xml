<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security-3.0.xsd">

	<!-- 
		NOTE:Unlike other configuration files, the default name space is 'security' instead
		of 'beans'. Therefore, when you declare normal Spring beans in this file, you have 
		to include the beans prefix for the <bean> and
		<property> elements.
	 -->
	 
	 <!-- 
	 	The <http auto-config="true"> element automatically configures the basic security 
	 	services that a typical web application needs.
	  -->
	  
	 
	   
	   <!--  
	   		With auto-config enabled, Spring will register HTTP Basic Authentication and 
	   		Form-Based Login services.
	   		
	   		With HTTP Basic Basic authentication credentials presented in HTTP request headers
	   		are processed. A browser will typically display a login dialog or a specific login 
	   		page for users to log in.
	   		
	   		With Form-Based, a web page that contains a login form for users to input their
			login details will is rendered
			
			Note that when HTTP Basic authentication and form-based login are enabled at the same time, the
			latter will be used.
	    -->
	    
	    <!--  
	   <http auto-config='true'>  -->
	<http auto-config='true'>
		<!-- redirect to /category after successful login when the login page was directly requested
		Otherwise, the user will be redirected to the target URL once the login succeeds. 
		If no default-target-url is defined,by default the user will be redirected to the context pathâ€™s root -->
		
		<!-- configure the authentication-failure-url attribute to specify which 
			URL to redirect to on
			login error. -->
		<form-login login-page="/login.do" default-target-url="/category" 
			authentication-failure-url="/login.do?error=true"/>
		<intercept-url pattern="/category*" access="ROLE_USER,ROLE_ANONYMOUS" />
		<intercept-url pattern="/account*" access="ROLE_USER" />
		<intercept-url pattern="/accountDelete*" access="ROLE_ADMIN" />
		<intercept-url pattern="/purchase/*" access="ROLE_USER" />
		
		<logout logout-success-url="/login.do" />
		
		<!-- Configure AccessDenied handling  -->
		<!-- Without this the user will see the servlet container default 
		HTTP 403 (Access Denied) page, if after logging in he attempts to access
		a secure resource to which he is not authorized -->
		<access-denied-handler error-page="/accessDenied"/>
		<!--NOTE: If the user is not already authenticated and the accessed resource does not have
			ROLE_ANONYMOUS, the access denied handler will not be invoked. Instead the user will be 
			redirected to authentication entry point, and he will see the login page.
			
			Note:LoginUrlAuthenticationEntryPoint is responsible for forwarding the user to the 
			login form.
		 -->
		
		<!-- 
			<remember-me
			By default, it encodes the username, password, remember-me expiration time, and a private key as a token, and stores it as a
			cookie in the userâ€™s browser. No need to do any database lookup to authenticate!!!!
		 -->
		<remember-me key="mySecret"/>
		
		<!--  Disable to simulate session fixation attack
		<session-management session-fixation-protection="none"/>
		-->
		 <!-- 
	  		Remember that you must always include a wildcard at the end of a URL pattern. Failing 
	  		to do so will make the URL pattern unable to match a URL that has request parameters.
	  		As a result, hackers could easily skip the security check by appending an arbitrary 
	  		request parameter.
	  		
	  		IT SEEMS THAT ONLY MATTER IF YOU HAVE WILD CARD ON THE CONTROLLER METHOD BUT NOT
	  		ON THE SECURITY URL PATTERN. BECAUSE WITHOUT IT HERE THE SECURITY WILL NOT BE
	  		INVOKED IF YOU HAVE REQUEST LIKE ../account2 which will bypass security but will
	  		enter the controller method because the request mapping has wild card in the value
	   	-->
	   	
	   	<!--  <custom-filter ref="ipFilter" before="FILTER_SECURITY_INTERCEPTOR"/>-->
	   	<!-- 
	   		we'll want to position this filter right before the FilterSecurityInterceptor, which 
	   		is responsible for determining whether the user has provided correct credentials to 
	   		give them access to the system. At this point in the servlet chain, the user's identity 
	   		is well known, so this is the appropriate location for the insertion of our filter.
	   	 -->
	   	 <custom-filter ref="requestHeaderFilter" before="FORM_LOGIN_FILTER"/>
	</http>
	
	<beans:bean id="ipFilter" class="com.my.mdemo.web.util.IPRoleAuthenticationFilter">
		<beans:property name="targetRole" value="ROLE_ADMIN"/>
		<beans:property name="allowedIPAddresses">
			<beans:list>
				<beans:value>192.168.251.101</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<beans:bean id="requestHeaderFilter" class="com.my.mdemo.web.util.RequestHeaderProcessingFilter">
		<beans:property ref="authenticationManager" name="authenticationManager"/>
		<beans:property ref="savedRequestAwareAuthenticationSuccessHandler" name="authenticationSuccessHandler"/>
	</beans:bean>
	
	<beans:bean id="signedSSOAuthenticationProvider" class="com.my.mdemo.web.util.SignedMsisdnAuthenticationProvider">
	</beans:bean>
	
	<beans:bean id="savedRequestAwareAuthenticationSuccessHandler" 
		class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
			<beans:property value="/category" name="defaultTargetUrl"/>
	</beans:bean>
	
	
	<!-- 
		For simple security requirements, Spring supports defining user details in 
		<user-service> directly
	 -->
	 <!-- 
	<authentication-manager>
		<authentication-provider>
			<user-service>
				<user name="admin" password="secret" authorities="ROLE_ADMIN,ROLE_USER" />
				<user name="user1" password="1111" authorities="ROLE_USER" />
			</user-service>
		</authentication-provider>
	</authentication-manager>
	 -->
	 
	
	<!-- 
		Spring Security also supports using custom SQL statements to query a legacy database
		for user details. This necessary when the system in which you are adding Spring security
		already has username/password store
	 -->
	 <!-- 
	<authentication-manager>
		<authentication-provider>
			<jdbc-user-service data-source-ref="dataSource"
				users-by-username-query=
				"SELECT username, password, 'true' as enabled
				FROM member
				WHERE username = ?"
				authorities-by-username-query=
				"SELECT member.username, member_role.role as authorities
				FROM member, member_role
				WHERE member.username = ? AND member.id = member_role.member_id" />
		</authentication-provider>
	</authentication-manager>
	 -->
	 <!-- 
	 	you can choose MD5 (Message-Digest algorithm 5), a one-way hash algorithm, 
	 	to encrypt your passwords.
	  -->
	  
	  <beans:bean class="org.springframework.security.authentication.encoding.ShaPasswordEncoder" 
	  		id="passwordEncoder"/>
	  
	  <authentication-manager alias="authenticationManager">
	  	<authentication-provider ref="signedSSOAuthenticationProvider"></authentication-provider>
		<authentication-provider> 
			<!-- optional password encryption -->
			<password-encoder ref="passwordEncoder">
				<!-- optional use of salt  -->
				 <salt-source ref="saltSource"/>
			</password-encoder>
			<jdbc-user-service data-source-ref="dataSource" cache-ref="userCache" />
		</authentication-provider>
	</authentication-manager>
	
	<beans:bean id="userCache"
		class="org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache">
		<beans:property name="cache" ref="userEhCache" />
	</beans:bean>
	
	<!-- 
		NOTES:
		an Ehcache instance can be created via EhCacheFactoryBean by providing a cache
		manager and a cache name.
	 -->
	<beans:bean id="userEhCache"
		class="org.springframework.cache.ehcache.EhCacheFactoryBean">
		<beans:property name="cacheManager" ref="cacheManager" />
		<beans:property name="cacheName" value="userCache" />
	</beans:bean>
	<!-- 
		A salt is a second plaintext component which is concatenated with the plaintext password 
		prior to encryption in order to ensure that two factors must be used to generate encrypted 
		password values.
		
		Need a salt because if the encrypted password in generated based only on the plian text 
		password, hackers can generate encrypted password from plain text passwords and compared
		to those stored in database (if the gain access to DB).
		
		Best practice salts generally fall into one of two categories:
		
		They are algorithmically generated from some piece of data associated with the userâ€”for 
		example, the timestamp that the user was created
		
		They are randomly generated, and stored in some form (plaintext or two-way encrypted) 
		along with the user's password record

	 -->  
		<beans:bean class="org.springframework.security.authentication.dao.ReflectionSaltSource" id="saltSource">
			<beans:property name="userPropertyToUse" value="username"/>
		</beans:bean>
		
		<!--  
		<beans:bean id="userDetailsService" class="com.my.mdemo.service.UserService">
			<beans:property name="dataSource" ref="dataSource"></beans:property>
		</beans:bean>
		-->
		
		<!-- This is not needed because userDetailsService is create by the jdbc-user-service tag  
			If you are not using the default USEERS,AUTHORITIES TABLES to store credentials, you
			will need to extend the UserService Interface and implement 
		<beans:bean id="userDetailsService" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
			<beans:property name="dataSource" ref="dataSource"></beans:property>
		</beans:bean>
		 -->
		 
		 <!-- 
		 	The role of the AuthenticationProvider, in the overall authentication process, 
		 	is to accept presented credentials (known as an Authentication object or authentication token) 
		 	from a principal's request and verify their correctness and validity.
		  -->
		  
		  <!-- 
		  	Normally, an AuthenticationProvider will look for a particular specialization of 
		  	AuthenticationToken that has been populated by a servlet filter earlier in the chain
		  	(earlier than the AuthenticationManager access checking is done, specifically),
		  	
		  	So, when you are implementing a custom AuthenticationProvider, it's quite likely 
		  	you'll be implementing a custom servlet filter as well, whose responsibility is 
		  	to supply a specialized AuthenticationToken.
		   -->
		   
</beans:beans>